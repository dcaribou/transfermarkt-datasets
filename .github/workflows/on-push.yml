name: Tansfermarkt Datasets Data Pipeline (On Push)

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:

    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.DEPLOY_KEY_PRIVATE }}
          
      - name: image build
        env:
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          # set image tag accordingly

          REF=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
          if [ $REF = master ];
          then
            TAG=master
          else
            TAG=dev
          fi

          # build and push
          
          docker build -t dcaribou/transfermarkt-datasets:$TAG .
          echo $DOCKERHUB_TOKEN | docker login --username dcaribou --password-stdin
          docker push dcaribou/transfermarkt-datasets:$TAG

      - name: run prep
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-1
          BRANCH: ${{ github.event.pull_request.head.ref }}
        run: |
          # trigger prep job in aws batch

          JOB_DEFINITION_NAME=transfermarkt-datasets-batch-job-definition-dev
          REVISION=$(
            aws batch describe-job-definitions | \
            jq --arg jdname $JOB_DEFINITION_NAME '.jobDefinitions | map(select(.jobDefinitionName==$jdname)) | sort_by(.revision) | last | .revision'
          )
          PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')

          JOB_ID=$(
            aws batch submit-job \
              --job-name on-push-pr-$PR_NUMBER \
              --job-queue transfermarkt-datasets-batch-compute-job-queue \
              --job-definition $JOB_DEFINITION_NAME:$REVISION \
              --container-overrides \
                command=/app/prepare_on_batch.sh,$BRANCH \
            | jq -r '.jobId'
          )

          echo "Succesfully triggered AWS Batch job with ID $JOB_ID"

          # wait for job completion

          JOB_STATUS=$(aws batch describe-jobs --jobs $JOB_ID | jq -r '.jobs[0].status')

          while [ $JOB_STATUS != FAILED ] && [ $JOB_STATUS != SUCCEEDED ]
          do
          sleep 5
          JOB_STATUS=$(aws batch describe-jobs --jobs $JOB_ID | jq -r '.jobs[0].status')
          echo $JOB_STATUS
          done

          if [ $JOB_STATUS = FAILED ]; then
          exit 1
          else
          exit 0
          fi
